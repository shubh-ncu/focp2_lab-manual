//q1 butterfly
#include <iostream>

using namespace std;

int main() {
    int n;

    cout << "Enter the size of the butterfly (n): ";
    cin >> n;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        for (int j = 1; j <= 2 * (n - i); j++) {
            cout << " ";
        }
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        cout << endl;
    }
    
    for (int i = n - 1; i >= 1; i--) {
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        for (int j = 1; j <= 2 * (n - i); j++) {
            cout << " ";
        }
        for (int j = 1; j <= i; j++) {
            cout << "*";
        }
        cout << endl;
    }

    return 0;
}
//q2
#include <iostream>

using namespace std;

int main() {
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i <n; i++) {
        cin >> arr[i];
    }

    cout << "Array in reverse order: ";
    for (int i = n - 1; i >= 0; i--) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}
//q3
#include <iostream>
using namespace std;

int main() {
    int n;

    cout << "Enter the number of elements in the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int max = arr[0];
    int min = arr[0];

    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
        if (arr[i] < min) {
            min= arr[i];
        }
    }

    cout << "Maximum element: " << max << endl;
    cout << "Minimum element: " << min << endl;

    return 0;
}
//q4
#include <iostream>
using namespace std;

int main() {
    int n;

    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];

    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    float sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }

    float average = sum / n;

    cout << "Sum: " << sum << endl;
    cout << "Average: " << average << endl; 

    return 0;
}

//q5
#include <iostream>
using namespace std;

int main() {  
    int n;  
    cout << "Enter a number ";  
    cin >> n;  

    int arr[n];  
    cout << "Numbers to be added: ";  
    for (int i = 0; i < n; i++) {  
        cin >> arr[i];  
    }  

    for (int i = 0; i < n - 1; i++) {  
        for (int j = 0; j < n - i - 1; j++) {  
            if (arr[j] > arr[j + 1]) {  
                swap(arr[j], arr[j + 1]);   
            }  
        }  
    }  

    cout << "Sorted array: ";  
    for (int i = 0; i < n; i++) {  
        cout << arr[i] << " ";  
    }  
    cout << endl;  

    return 0;  
}

//q6
#include <iostream>
using namespace std;

int main() {
    int n,key;

    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];

    cout << "Enter the elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << "Enter the element to be found: ";
    cin >> key;
    for (int i = 0; i < n; i++){
        if(arr[i]==key){
            cout<<"key found at index "<<i<<endl;
            break;
        }
    }
    return 0;
}
//q7
#include <iostream>
using namespace std;

int main() {  
    int n;  
    cout << "Enter a number: ";  
    cin >> n;  

    int arr[n];  
    cout << "Numbers to be added: ";  
    for (int i = 0; i < n; i++) {  
        cin >> arr[i];  
    }  

    int temp[n], size = 0;  

    for (int i = 0; i < n; i++) {  
        bool repeat = false;  
        for (int j = 0; j < size; j++) {  
            if (arr[i] == temp[j]) {  
                repeat = true;  
                break;  
            }  
        }  
        if (!repeat) {  
            temp[size] = arr[i];  
            size++;  
        }  
    }  

    cout << "Removing duplicate array: ";  
    for (int i = 0; i < size; i++) {  
        cout << temp[i] << " ";  
    }  
    cout << endl;  

    return 0;  
}


//q9 transpose
#include <iostream>
using namespace std;

int main() {
    int matrix[100][100] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    int rows = 3;
    int cols = 3;

    int transposed_matrix[100][100];

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposed_matrix[j][i] = matrix[i][j];
        }
    }

    for (int i = 0; i < cols; i++) {
        for (int j = 0; j < rows; j++) {
            cout << transposed_matrix[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

//q10
#include <iostream>
using namespace std;

int main() {  
    int r1, c1, r2, c2;  
    cout << "Enter rows and columns of first matrix: ";  
    cin >> r1 >> c1;  
    cout << "Enter rows and columns of second matrix: ";  
    cin >> r2 >> c2;  

    if (c1 != r2) {  
        cout << "Multiplication not possible! Columns of first must match rows of second.\n";  
        return 0;  
    }  

    int a[r1][c1], b[r2][c2], c[r1][c2];  


    for (int i = 0; i < r1; i++)  
        for (int j = 0; j < c2; j++)  
            c[i][j] = 0;    

    cout << "Enter first matrix elements:\n";  
    for (int i = 0; i < r1; i++)  
        for (int j = 0; j < c1; j++)  
            cin >> a[i][j];  

    cout << "Enter second matrix elements:\n";  
    for (int i = 0; i < r2; i++)  
        for (int j = 0; j < c2; j++)  
            cin >> b[i][j];  

    // Matrix Multiplication  
    for (int i = 0; i < r1; i++) {  
        for (int j = 0; j < c2; j++) {  
            for (int k = 0; k < c1; k++) {  
                c[i][j] += a[i][k] * b[k][j];  
            }  
        }  
    }  

    cout << "Resultant Matrix:\n";  
    for (int i = 0; i < r1; i++) {  
        for (int j = 0; j < c2; j++) {  
            cout << c[i][j] << " ";  
        }  
        cout << endl;  
    }  

    return 0;  
}

//q11
#include <iostream>

using namespace std;

int main() {
    int matrix[100][100]; 
    int n,j; 

    cout << "Enter the size of the square matrix: ";
    cin >> n;

    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    int primarySum = 0;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++){
            if(matrix[i]==matrix[j]){
                 primarySum += matrix[i][j];
        }
        
        }
    }   


    cout << "Sum of primary diagonal elements: " << primarySum << endl;

    return 0;
}

//q12
#include <iostream>

using namespace std;

int main() {
    int matrix[100][100];
    int rows, cols;

    cout << "Enter the number of rows: ";
    cin >> rows;
    cout << "Enter the number of columns: ";
    cin >> cols;

    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }

    for (int i = 0; i < rows; i++) {
        int currentRowSum = 0;
        for (int j = 0; j < cols; j++) {
            currentRowSum += matrix[i][j];
        }

        if (currentRowSum > maxRowSum) {
            maxRowSum = currentRowSum;
            maxRowIndex = i;
        }
    }

    if (maxRowIndex != -1) {
        cout << "Row with the maximum sum: " << maxRowIndex << endl;
        cout << "Maximum sum: " << maxRowSum << endl;
    } else {
        cout << "Matrix is empty or invalid." << endl;
    }

    return 0;
}

//q14
#include <iostream>
using namespace std;

int main() {  
    int r, c;  
    cout << "Rows, cols : ";  
    cin >> r >> c;  

    int arr[r][c];  
    cout << "Matrix :\n";  
    for (int i = 0; i < r; i++)  
        for (int j = 0; j < c; j++)  
            cin >> arr[i][j];  

    cout << "Boundary elements: ";  

    
    for (int j = 0; j < c; j++)  
        cout << arr[0][j] << " ";  

    for (int i = 1; i < r; i++)  
        cout << arr[i][c - 1] << " ";  

   
    if (r > 1)  
        for (int j = c - 2; j >= 0; j--)  
            cout << arr[r - 1][j] << " ";  


    if (c > 1)  
        for (int i = r - 2; i > 0; i--)  
            cout << arr[i][0] << " ";  

    cout << endl;  
    return 0;  
}

//q15
#include <iostream>
using namespace std;

int main() {
    int rows, cols;
    cout << "Enter the number of rows: ";
    cin >> rows;
    cout << "Enter the number of columns: ";
    cin >> cols;

    int matrix[rows][cols];
    cout << "Enter the elements of the matrix:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }

    bool saddlePointFound = false;

    for (int i = 0; i < rows; i++) {
        int minRowValue = matrix[i][0];
        int minColIndex = 0;

        for (int j = 1; j < cols; j++) {
            if (matrix[i][j] < minRowValue) {
                minRowValue = matrix[i][j];
                minColIndex = j;
            }
        }

        bool isSaddlePoint = true;
        for (int k = 0; k < rows; k++) {
            if (matrix[k][minColIndex] > minRowValue) {
                isSaddlePoint = false;
                break;
            }
        }

        if (isSaddlePoint) {
            cout << "Saddle Point found at row " << i + 1 << ", column " << minColIndex + 1 << ": " << minRowValue << endl;
            saddlePointFound = true;
        }
    }

    if (!saddlePointFound) {
        cout << "No saddle point found in the matrix." << endl;
    }

    return 0;
}
